sudo: false
matrix:
  allow_failures:
    - os: osx
    - python: 3.9-dev
  include:
    - language: python
      python: 2.7
      dist: trusty
      env:
        - TRAVIS_NODE_VERSION=8
        - BROWSER=Firefox
    - language: python
      dist: trusty
      python: 3.4
      env:
        - TRAVIS_NODE_VERSION=8
        - BROWSER=Chrome
      addons:
        chrome: stable
    - language: python
      python: 3.5
      env:
        - TRAVIS_NODE_VERSION=10
        - BROWSER=PhantomJS
    - language: python
      python: 3.6
      dist: trusty
      env:
        - TRAVIS_NODE_VERSION=10
        - BROWSER=Firefox
    - language: python
      python: 3.7
      dist: xenial
      env:
        - TRAVIS_NODE_VERSION=10
        - BROWSER=PhantomJS
    - language: python
      python: 3.8
      dist: bionic
      env:
        - TRAVIS_NODE_VERSION=12
        - BROWSER=PhantomJS
      addons:
        chrome: stable
    - language: python
      python: 3.9-dev
      dist: xenial
      env:
        - TRAVIS_NODE_VERSION=14
        - BROWSER=Chrome
      addons:
        chrome: stable
    - language: python
      dist: xenial
      python: pypy
      env:
        - TRAVIS_NODE_VERSION=8
        - BROWSER=PhantomJS
    - language: python
      python: pypy3
      env:
        - TRAVIS_NODE_VERSION=10
        - BROWSER=PhantomJS
      addons:
        chrome: stable
    # test different versions of Node.js on osx
    - language: node_js
      node_js: 8
      os: osx
      env:
        - TRAVIS_PYTHON_VERSION=3.5.7
        - BROWSER=Safari
    - language: node_js
      node_js: 10
      os: osx
      env:
        - TRAVIS_PYTHON_VERSION=3.6.8
        - BROWSER=Safari
    - language: node_js
      node_js: 12
      os: osx
      env:
        - TRAVIS_PYTHON_VERSION=3.7.3
        - BROWSER=PhantomJS

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update || brew update ;
      brew install pyenv ;
      brew outdated pyenv || brew upgrade pyenv ;
      pyenv install $TRAVIS_PYTHON_VERSION ;
      pyenv global $TRAVIS_PYTHON_VERSION ;
      eval "$(pyenv init -)" ;
      python --version ;
      python -m pip install --user virtualenv ;
      python -m virtualenv ~/.venv ;
      source ~/.venv/bin/activate ;
    else
      export DISPLAY=:99.0 ;
      sh -e /etc/init.d/xvfb start ;
      rm -rf ~/.nvm ;
      git clone https://github.com/creationix/nvm.git ~/.nvm ;
      (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags` );
      source ~/.nvm/nvm.sh ;
      nvm install "$TRAVIS_NODE_VERSION" ;
      firefox --version ;
    fi
  - node --version
  - npm --version

install:
  - pip install coverage flake8
  # install the required development dependencies as wheels first
  - pip install -e .[dev,rjs,webpack]

  # doing the env in this directory to save build time/bandwidth, as the
  # same environment will be used for both Python and JavaScript tests.
  - calmjs npm --install nunja[dev,rjs,webpack] -w -D
  # out-of-band installation of platform specific dependencies
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      npm install karma-safari-launcher ;
    fi
  - export CALMJS_TEST_ENV=.
script:
  - flake8 setup.py src
  - coverage run --include=src/* -m unittest nunja.tests.make_suite

  # generate bundle/tests
  - mkdir manual
  - ./node_modules/.bin/eslint "src/**/*.js"

  # The standard style tests, though we need the additional source
  # registries from nunja.mold.testing so that those templates there
  # will be bundled into the artifact.

  # RequireJS
  - calmjs karma -T -c --cover-test --browser=$BROWSER
      rjs -w
        nunja --source-registries=calmjs.module,nunja.mold,nunja.mold.testing
  # Webpack
  - calmjs karma -T -c --cover-test --browser=$BROWSER
      webpack -w
        nunja --source-registries=calmjs.module,nunja.mold,nunja.mold.testing

  # This test using the RequireJS build toolchain which include tests
  # against the path that make heavy use of the async mold/template
  # loading feature; note the inclusion of the nunja.mold.testing as
  # a test registry to only make those names available.  This was the
  # original test suite developed as part of the initial development
  # during mid-2016.
  # Also note the usage of --build-dir=manual for the source maps.
  - calmjs karma -T -c --cover-test --browser=$BROWSER
      --test-registry=calmjs.module.tests,nunja.rjs.tests,nunja.mold.testing
      rjs nunja --optional-advice=nunja[raw] --build-dir=manual

# Slim, but building an artifact that can be used to test the molds.
#  - calmjs karma rjs nunja --source-registry=nunja.mold.tests,nunja.mold,calmjs.module --export-target=nunja.mold.tests.js --optional-advice=nunja[slim] -w
# Then test the thing through the standalone runner
#  - calmjs karma run --artifact=nunja.mold.tests.js -t calmjs.rjs nunja

# need one more that generates the standard artifact, with a runner that
# invokes karma with the additional artifact.

after_success:
  - coverage report -m
  # only submit coverage when testing under linux.
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      rvm default;
      gem install coveralls-lcov;
      export PROJ_DIR=`pwd`/;
      export PATH=$PATH:`pwd`/node_modules/.bin;
      npm install remap-istanbul;
      pip install coveralls;
      cd manual;
      remap-istanbul -i ../coverage/coverage.json -t lcovonly -o remapped.lcov;
      sed -i "s#SF:../#SF:#" remapped.lcov;
      sed -i "s#SF:${PROJ_DIR}#SF:#" remapped.lcov;
      cd ..;
      echo "running coveralls-lcov conversion";
      coveralls-lcov -v -n manual/remapped.lcov > coverage.json ;
      echo "running coveralls with merge";
      coveralls --merge=coverage.json ;
    fi

branches:
  only:
    - testing
    - master
    - 0.1.x
    - 0.1.0
    - 1.0.x
